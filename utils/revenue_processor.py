"""
Enhanced Revenue Processing with Split Commission Structure
"""
import pandas as pd
import numpy as np
import re
from decimal import Decimal
from typing import Dict, List, Tuple, Any, Optional
import streamlit as st

class RevenueProcessor:
    """Enhanced revenue processor with commission splitting"""
    
    def __init__(self):
        self.commission_types = {
            'lead_generation': 'Lead Generation Commission',
            'sales': 'Sales Commission', 
            'technician_work': 'Technician Work Commission'
        }
        
        # Default commission rates (can be customized)
        self.default_rates = {
            'lead_generation_rate': Decimal('2.0'),  # 2% for lead generation
            'sales_rate': Decimal('3.0'),            # 3% for sales
            'technician_work_rate': Decimal('5.0')   # 5% for technician work (split among techs)
        }
    
    def parse_technicians(self, technician_string: str) -> List[str]:
        """Parse technician string into individual names"""
        if pd.isna(technician_string) or not technician_string:
            return []
        
        # Split by comma and clean up names
        technicians = []
        parts = str(technician_string).split(',')
        
        for part in parts:
            name = part.strip()
            if name:
                technicians.append(name)
        
        return technicians
    
    def process_revenue_file(self, file_data, filename: str = None) -> Tuple[pd.DataFrame, Dict[str, Any]]:
        """Process revenue file and create commission breakdown"""
        
        try:
            # Read Excel file
            if filename and filename.endswith('.csv'):
                df = pd.read_csv(file_data)
            else:
                # Read first sheet
                df = pd.read_excel(file_data, sheet_name=0)
            
            # Process each job for commission breakdown
            processed_jobs = []
            
            for _, row in df.iterrows():
                job_data = self.process_single_job(row)
                processed_jobs.append(job_data)
            
            # Create comprehensive commission breakdown
            commission_df = pd.DataFrame(processed_jobs)
            
            # Create summary
            summary = self.create_commission_summary(commission_df)
            
            return commission_df, summary
            
        except Exception as e:
            st.error(f"Error processing revenue file: {str(e)}")
            raise
    
    def process_single_job(self, job_row: pd.Series) -> Dict[str, Any]:
        """Process a single job and calculate all commission types"""
        
        job_data = {
            'invoice_number': job_row.get('Invoice #', ''),
            'invoice_date': job_row.get('Invoice Date', ''),
            'customer_name': job_row.get('Customer Name', ''),
            'business_unit': job_row.get('Business Unit', ''),
            'total_revenue': Decimal(str(job_row.get('Jobs Total Revenue', 0))),
            'lead_generated_by': job_row.get('Lead Generated By', ''),
            'sold_by': job_row.get('Sold By', ''),
            'assigned_technicians_raw': job_row.get('Assigned Technicians', ''),
            'materials_cost': Decimal(str(job_row.get('Materials + Equip. + PO/Bill Costs', 0))),
        }
        
        # Parse technicians
        technicians = self.parse_technicians(job_data['assigned_technicians_raw'])
        job_data['assigned_technicians'] = technicians
        job_data['technician_count'] = len(technicians)
        
        # Calculate commissions
        revenue = job_data['total_revenue']
        
        # Lead Generation Commission
        if job_data['lead_generated_by'] and not pd.isna(job_data['lead_generated_by']):
            job_data['lead_commission_total'] = revenue * (self.default_rates['lead_generation_rate'] / 100)
            job_data['lead_commission_person'] = job_data['lead_generated_by']
        else:
            job_data['lead_commission_total'] = Decimal('0')
            job_data['lead_commission_person'] = ''
        
        # Sales Commission
        if job_data['sold_by'] and not pd.isna(job_data['sold_by']):
            job_data['sales_commission_total'] = revenue * (self.default_rates['sales_rate'] / 100)
            job_data['sales_commission_person'] = job_data['sold_by']
        else:
            job_data['sales_commission_total'] = Decimal('0')
            job_data['sales_commission_person'] = ''
        
        # Technician Work Commission (split among technicians)
        tech_commission_total = revenue * (self.default_rates['technician_work_rate'] / 100)
        job_data['technician_commission_total'] = tech_commission_total
        
        if technicians:
            tech_commission_per_person = tech_commission_total / len(technicians)
            job_data['technician_commission_per_person'] = tech_commission_per_person
        else:
            job_data['technician_commission_per_person'] = Decimal('0')
        
        # Total commission for this job
        job_data['total_job_commission'] = (
            job_data['lead_commission_total'] + 
            job_data['sales_commission_total'] + 
            job_data['technician_commission_total']
        )
        
        return job_data
    
    def create_commission_summary(self, commission_df: pd.DataFrame) -> Dict[str, Any]:
        """Create summary statistics for commissions"""
        
        summary = {
            'total_jobs': len(commission_df),
            'total_revenue': commission_df['total_revenue'].sum(),
            'total_lead_commissions': commission_df['lead_commission_total'].sum(),
            'total_sales_commissions': commission_df['sales_commission_total'].sum(),
            'total_technician_commissions': commission_df['technician_commission_total'].sum(),
            'total_all_commissions': commission_df['total_job_commission'].sum(),
            'average_job_value': commission_df['total_revenue'].mean(),
            'unique_business_units': commission_df['business_unit'].nunique(),
            'commission_rate_breakdown': self.default_rates.copy()
        }
        
        # Individual person summaries
        summary['lead_generators'] = self.summarize_by_person(commission_df, 'lead')
        summary['sales_people'] = self.summarize_by_person(commission_df, 'sales')
        summary['technicians'] = self.summarize_technician_commissions(commission_df)
        
        return summary
    
    def summarize_by_person(self, df: pd.DataFrame, commission_type: str) -> Dict[str, Decimal]:
        """Summarize commissions by person for lead generation or sales"""
        
        if commission_type == 'lead':
            person_col = 'lead_commission_person'
            amount_col = 'lead_commission_total'
        elif commission_type == 'sales':
            person_col = 'sales_commission_person'
            amount_col = 'sales_commission_total'
        else:
            return {}
        
        # Group by person and sum commissions
        person_summary = {}
        for _, row in df.iterrows():
            person = row[person_col]
            amount = row[amount_col]
            
            if person and not pd.isna(person) and amount > 0:
                if person not in person_summary:
                    person_summary[person] = Decimal('0')
                person_summary[person] += amount
        
        return person_summary
    
    def summarize_technician_commissions(self, df: pd.DataFrame) -> Dict[str, Decimal]:
        """Summarize commissions for individual technicians"""
        
        technician_summary = {}
        
        for _, row in df.iterrows():
            technicians = row['assigned_technicians']
            commission_per_tech = row['technician_commission_per_person']
            
            for tech in technicians:
                if tech not in technician_summary:
                    technician_summary[tech] = Decimal('0')
                technician_summary[tech] += commission_per_tech
        
        return technician_summary
    
    def create_editable_table_data(self, commission_df: pd.DataFrame) -> pd.DataFrame:
        """Create a table suitable for editing in Streamlit"""
        
        # Create a more user-friendly table for editing
        table_data = []
        
        for _, row in commission_df.iterrows():
            table_row = {
                'Invoice #': row['invoice_number'],
                'Date': row['invoice_date'],
                'Customer': row['customer_name'],
                'Business Unit': row['business_unit'],
                'Revenue': f"${float(row['total_revenue']):,.2f}",
                'Lead Gen By': row['lead_commission_person'],
                'Lead Commission': f"${float(row['lead_commission_total']):,.2f}",
                'Sold By': row['sales_commission_person'],
                'Sales Commission': f"${float(row['sales_commission_total']):,.2f}",
                'Assigned Techs': ', '.join(row['assigned_technicians']),
                'Tech Commission Total': f"${float(row['technician_commission_total']):,.2f}",
                'Tech Commission Each': f"${float(row['technician_commission_per_person']):,.2f}",
                'Total Job Commission': f"${float(row['total_job_commission']):,.2f}"
            }
            table_data.append(table_row)
        
        return pd.DataFrame(table_data)
    
    def display_commission_breakdown(self, commission_df: pd.DataFrame, summary: Dict[str, Any]):
        """Display comprehensive commission breakdown in Streamlit"""
        
        st.success(f"âœ… Revenue processed: {summary['total_jobs']} jobs analyzed")
        
        # Overall metrics
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Total Revenue", f"${summary['total_revenue']:,.2f}")
        with col2:
            st.metric("Total Commissions", f"${summary['total_all_commissions']:,.2f}")
        with col3:
            st.metric("Commission Rate", f"{(summary['total_all_commissions']/summary['total_revenue']*100):.1f}%")
        with col4:
            st.metric("Average Job", f"${summary['average_job_value']:,.2f}")
        
        # Commission breakdown by type
        st.subheader("ðŸ’° Commission Breakdown by Type")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric(
                "Lead Generation", 
                f"${summary['total_lead_commissions']:,.2f}",
                f"{self.default_rates['lead_generation_rate']}% rate"
            )
        
        with col2:
            st.metric(
                "Sales Commissions", 
                f"${summary['total_sales_commissions']:,.2f}",
                f"{self.default_rates['sales_rate']}% rate"
            )
        
        with col3:
            st.metric(
                "Technician Work", 
                f"${summary['total_technician_commissions']:,.2f}",
                f"{self.default_rates['technician_work_rate']}% rate"
            )
        
        # Individual commission tables
        self.display_individual_commissions(summary)
        
        # Editable job table
        st.subheader("ðŸ“‹ All Jobs - Commission Breakdown")
        editable_table = self.create_editable_table_data(commission_df)
        st.dataframe(editable_table, use_container_width=True)
    
    def display_individual_commissions(self, summary: Dict[str, Any]):
        """Display individual commission summaries"""
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.subheader("ðŸŽ¯ Lead Generation Commissions")
            if summary['lead_generators']:
                lead_df = pd.DataFrame([
                    {'Person': person, 'Commission': f"${amount:,.2f}"}
                    for person, amount in summary['lead_generators'].items()
                ])
                st.dataframe(lead_df, use_container_width=True, hide_index=True)
            else:
                st.info("No lead generation commissions")
        
        with col2:
            st.subheader("ðŸ’¼ Sales Commissions")
            if summary['sales_people']:
                sales_df = pd.DataFrame([
                    {'Person': person, 'Commission': f"${amount:,.2f}"}
                    for person, amount in summary['sales_people'].items()
                ])
                st.dataframe(sales_df, use_container_width=True, hide_index=True)
            else:
                st.info("No sales commissions")
        
        with col3:
            st.subheader("ðŸ”§ Technician Commissions")
            if summary['technicians']:
                tech_df = pd.DataFrame([
                    {'Technician': person, 'Commission': f"${amount:,.2f}"}
                    for person, amount in summary['technicians'].items()
                ])
                st.dataframe(tech_df, use_container_width=True, hide_index=True)
            else:
                st.info("No technician commissions")