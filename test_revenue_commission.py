#!/usr/bin/env python3
"""
Test script for the new revenue commission system
"""

import pandas as pd
from datetime import datetime
import sys
import os

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_revenue_processing():
    """Test the revenue data processing function"""
    print("ðŸ§ª Testing Revenue Data Processing")
    print("=" * 50)
    
    # Create sample revenue data
    sample_data = pd.DataFrame([
        {
            'Business Unit': 'East Coast',
            'Jobs total revenue': 150000.0,
            'Lead Generated By': 'John Doe',
            'Sold By': 'Jane Smith',
            'Assigned Technicians': 'Bob Johnson, Mike Wilson, Sarah Davis'
        },
        {
            'Business Unit': 'West Coast', 
            'Jobs total revenue': 200000.0,
            'Lead Generated By': 'Alice Brown',
            'Sold By': 'Tom Wilson',
            'Assigned Technicians': 'Emma Jones & David Lee'
        },
        {
            'Business Unit': 'Central',
            'Jobs total revenue': 125000.0,
            'Lead Generated By': 'Chris Taylor',
            'Sold By': 'Lisa Johnson',
            'Assigned Technicians': 'Mark Anderson'
        }
    ])
    
    print("Sample Revenue Data:")
    print(sample_data)
    print()
    
    # Mock the process_revenue_data function
    def process_revenue_data(df, business_unit_col, revenue_col, lead_gen_col, sold_by_col, assigned_techs_col):
        """Process revenue data to split technicians and standardize columns"""
        df_processed = df.copy()
        
        # Standardize core columns
        if revenue_col and revenue_col != 'Revenue':
            df_processed['Revenue'] = df_processed[revenue_col]
            if revenue_col != 'Revenue':
                df_processed = df_processed.drop(columns=[revenue_col])
        
        if business_unit_col and business_unit_col != 'Business Unit':
            df_processed['Business Unit'] = df_processed[business_unit_col]
            if business_unit_col != 'Business Unit':
                df_processed = df_processed.drop(columns=[business_unit_col])
        
        # Standardize commission-related columns
        if lead_gen_col:
            df_processed['Lead Generated By'] = df_processed[lead_gen_col]
            if lead_gen_col != 'Lead Generated By':
                df_processed = df_processed.drop(columns=[lead_gen_col])
        
        if sold_by_col:
            df_processed['Sold By'] = df_processed[sold_by_col]
            if sold_by_col != 'Sold By':
                df_processed = df_processed.drop(columns=[sold_by_col])
        
        if assigned_techs_col:
            # Split technicians if they are in a single column
            original_techs = df_processed[assigned_techs_col].fillna('')
            
            # Create individual technician columns
            max_techs = 0
            for tech_string in original_techs:
                if pd.notna(tech_string) and str(tech_string).strip():
                    # Split by common separators
                    techs = [t.strip() for t in str(tech_string).replace(',', ';').replace('&', ';').replace(' and ', ';').split(';') if t.strip()]
                    max_techs = max(max_techs, len(techs))
            
            # Add individual technician columns
            for i in range(max_techs):
                df_processed[f'Technician_{i+1}'] = ''
            
            # Populate technician columns
            for idx, tech_string in enumerate(original_techs):
                if pd.notna(tech_string) and str(tech_string).strip():
                    techs = [t.strip() for t in str(tech_string).replace(',', ';').replace('&', ';').replace(' and ', ';').split(';') if t.strip()]
                    for i, tech in enumerate(techs):
                        if i < max_techs:
                            df_processed.loc[idx, f'Technician_{i+1}'] = tech
            
            # Drop original technician column
            if assigned_techs_col != 'Assigned Technicians':
                df_processed = df_processed.drop(columns=[assigned_techs_col])
            else:
                df_processed = df_processed.drop(columns=['Assigned Technicians'])
            
            # Add metadata about technician splitting
            df_processed['Total_Technicians'] = df_processed[[f'Technician_{i+1}' for i in range(max_techs)]].apply(
                lambda row: len([t for t in row if t and str(t).strip()]), axis=1
            )
        
        return df_processed
    
    # Process the data
    processed_data = process_revenue_data(
        sample_data, 
        'Business Unit',
        'Jobs total revenue',
        'Lead Generated By',
        'Sold By', 
        'Assigned Technicians'
    )
    
    print("Processed Revenue Data:")
    print(processed_data)
    print()

def test_commission_calculation():
    """Test the commission calculation logic"""
    print("ðŸ§ª Testing Commission Calculation")
    print("=" * 50)
    
    # Sample processed revenue data
    revenue_data = pd.DataFrame([
        {
            'Business Unit': 'East Coast',
            'Revenue': 150000.0,
            'Lead Generated By': 'John Doe',
            'Sold By': 'Jane Smith',
            'Technician_1': 'Bob Johnson',
            'Technician_2': 'Mike Wilson',
            'Technician_3': 'Sarah Davis',
            'Total_Technicians': 3
        },
        {
            'Business Unit': 'West Coast',
            'Revenue': 200000.0,
            'Lead Generated By': 'Alice Brown', 
            'Sold By': 'Tom Wilson',
            'Technician_1': 'Emma Jones',
            'Technician_2': 'David Lee',
            'Technician_3': '',
            'Total_Technicians': 2
        }
    ])
    
    # Sample commission settings
    commission_settings = {
        'business_unit_settings': {
            'East Coast': {
                'lead_gen_rate': 5.0,
                'sold_by_rate': 7.5,
                'work_done_rate': 3.0,
                'enabled': True
            },
            'West Coast': {
                'lead_gen_rate': 4.0,
                'sold_by_rate': 6.0,
                'work_done_rate': 2.5,
                'enabled': True
            },
            'Default': {
                'lead_gen_rate': 3.0,
                'sold_by_rate': 5.0,
                'work_done_rate': 2.0,
                'enabled': True
            }
        }
    }
    
    def calculate_revenue_commissions(revenue_data, commission_settings):
        """Calculate commissions for revenue data based on business unit specific settings"""
        if revenue_data is None or revenue_data.empty:
            return pd.DataFrame()
        
        if 'business_unit_settings' not in commission_settings:
            return pd.DataFrame()
        
        business_unit_settings = commission_settings['business_unit_settings']
        results = []
        
        for idx, row in revenue_data.iterrows():
            business_unit = row.get('Business Unit', 'Default')
            revenue = row.get('Revenue', 0)
            
            # Get settings for this business unit, fallback to Default
            settings = business_unit_settings.get(business_unit, business_unit_settings.get('Default', {
                'lead_gen_rate': 0, 'sold_by_rate': 0, 'work_done_rate': 0, 'enabled': False
            }))
            
            if not settings.get('enabled', False) or revenue <= 0:
                continue
            
            # Lead Generated By commission
            if 'Lead Generated By' in row and pd.notna(row['Lead Generated By']) and str(row['Lead Generated By']).strip():
                lead_gen_person = str(row['Lead Generated By']).strip()
                lead_gen_commission = revenue * (settings['lead_gen_rate'] / 100)
                
                results.append({
                    'Employee': lead_gen_person,
                    'Commission Type': 'Lead Generation',
                    'Business Unit': business_unit,
                    'Revenue': revenue,
                    'Commission Rate (%)': settings['lead_gen_rate'],
                    'Commission Amount': lead_gen_commission,
                    'Source': f"Lead generation for {business_unit}"
                })
            
            # Sold By commission
            if 'Sold By' in row and pd.notna(row['Sold By']) and str(row['Sold By']).strip():
                sales_person = str(row['Sold By']).strip()
                sold_by_commission = revenue * (settings['sold_by_rate'] / 100)
                
                results.append({
                    'Employee': sales_person,
                    'Commission Type': 'Sales',
                    'Business Unit': business_unit,
                    'Revenue': revenue,
                    'Commission Rate (%)': settings['sold_by_rate'],
                    'Commission Amount': sold_by_commission,
                    'Source': f"Sales for {business_unit}"
                })
            
            # Work Done commission (split among technicians)
            technicians = []
            for col in row.index:
                if col.startswith('Technician_') and pd.notna(row[col]) and str(row[col]).strip():
                    technicians.append(str(row[col]).strip())
            
            if technicians and settings['work_done_rate'] > 0:
                total_work_commission = revenue * (settings['work_done_rate'] / 100)
                commission_per_tech = total_work_commission / len(technicians)
                
                for tech in technicians:
                    results.append({
                        'Employee': tech,
                        'Commission Type': 'Work Done',
                        'Business Unit': business_unit,
                        'Revenue': revenue,
                        'Commission Rate (%)': settings['work_done_rate'] / len(technicians),
                        'Commission Amount': commission_per_tech,
                        'Source': f"Work done for {business_unit} (split {len(technicians)} ways)"
                    })
        
        if results:
            return pd.DataFrame(results)
        else:
            return pd.DataFrame()
    
    # Calculate commissions
    commission_results = calculate_revenue_commissions(revenue_data, commission_settings)
    
    print("Commission Results:")
    print(commission_results)
    print()
    
    # Summary by employee
    if not commission_results.empty:
        print("Commission Summary by Employee:")
        summary = commission_results.groupby('Employee').agg({
            'Commission Amount': 'sum',
            'Commission Type': lambda x: ', '.join(x.unique())
        }).round(2)
        print(summary)
        print()
        
        print("Commission Summary by Type:")
        type_summary = commission_results.groupby('Commission Type')['Commission Amount'].sum().round(2)
        print(type_summary)
        print()
        
        total_commissions = commission_results['Commission Amount'].sum()
        print(f"Total Commissions: ${total_commissions:,.2f}")

if __name__ == "__main__":
    print("ðŸš€ Revenue Commission System Test")
    print("=" * 60)
    print()
    
    test_revenue_processing()
    print()
    test_commission_calculation()
    
    print("âœ… All tests completed!")