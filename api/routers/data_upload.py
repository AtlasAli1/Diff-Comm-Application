"""
Data upload API endpoints
"""

from fastapi import APIRouter, HTTPException, status, UploadFile, File
from typing import List

from ..models.data_upload import UploadResponse
from ..services.data_upload_service import DataUploadService

router = APIRouter()
upload_service = DataUploadService()


@router.post("/upload/timesheet", response_model=UploadResponse)
async def upload_timesheet_data(file: UploadFile = File(...)):
    """
    Upload timesheet data from CSV or Excel file
    
    - **file**: Timesheet data file (CSV or Excel format)
    
    Expected columns:
    - Employee Name (required)
    - Regular Hours, Reg Hours, or similar
    - OT Hours (optional)
    - DT Hours (optional)
    - Date (optional)
    
    File size limit: 25MB
    """
    try:
        # Validate file
        if not file.filename:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="No file selected"
            )
        
        # Check file extension
        allowed_extensions = {'.csv', '.xlsx', '.xls'}
        file_ext = '.' + file.filename.lower().split('.')[-1]
        if file_ext not in allowed_extensions:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"Unsupported file format. Allowed: {', '.join(allowed_extensions)}"
            )
        
        # Check file size (25MB limit)
        file_content = await file.read()
        if len(file_content) > 25 * 1024 * 1024:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="File size exceeds 25MB limit"
            )
        
        if len(file_content) == 0:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Uploaded file is empty"
            )
        
        # Process upload
        result = await upload_service.upload_timesheet_data(file_content, file.filename)
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to process timesheet upload: {str(e)}"
        )


@router.post("/upload/revenue", response_model=UploadResponse)
async def upload_revenue_data(file: UploadFile = File(...)):
    """
    Upload revenue data from CSV or Excel file
    
    - **file**: Revenue data file (CSV or Excel format)
    
    Expected columns:
    - Business Unit (required)
    - Revenue amount column (Jobs Total Revenue, Revenue, Total, Amount, etc.)
    - Job Number (optional)
    - Date (optional)
    - Lead Generated By (optional)
    - Sold By (optional)
    - Assigned Technicians (optional)
    
    File size limit: 25MB
    """
    try:
        # Validate file
        if not file.filename:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="No file selected"
            )
        
        # Check file extension
        allowed_extensions = {'.csv', '.xlsx', '.xls'}
        file_ext = '.' + file.filename.lower().split('.')[-1]
        if file_ext not in allowed_extensions:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"Unsupported file format. Allowed: {', '.join(allowed_extensions)}"
            )
        
        # Check file size
        file_content = await file.read()
        if len(file_content) > 25 * 1024 * 1024:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="File size exceeds 25MB limit"
            )
        
        if len(file_content) == 0:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Uploaded file is empty"
            )
        
        # Process upload
        result = await upload_service.upload_revenue_data(file_content, file.filename)
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to process revenue upload: {str(e)}"
        )


@router.post("/upload/employees", response_model=UploadResponse)
async def upload_employee_data(file: UploadFile = File(...)):
    """
    Upload employee data from CSV or Excel file
    
    - **file**: Employee data file (CSV or Excel format)
    
    Expected columns:
    - Name (required)
    - Hourly Rate (required)
    - Employee ID (optional)
    - Department (optional)
    - Hire Date (optional)
    - Status (optional: Active, Inactive, Helper/Apprentice, Excluded from Payroll)
    - Commission Plan (optional: Hourly + Commission, Efficiency Pay)
    
    File size limit: 25MB
    """
    try:
        # Validate file
        if not file.filename:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="No file selected"
            )
        
        # Check file extension
        allowed_extensions = {'.csv', '.xlsx', '.xls'}
        file_ext = '.' + file.filename.lower().split('.')[-1]
        if file_ext not in allowed_extensions:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"Unsupported file format. Allowed: {', '.join(allowed_extensions)}"
            )
        
        # Check file size
        file_content = await file.read()
        if len(file_content) > 25 * 1024 * 1024:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="File size exceeds 25MB limit"
            )
        
        if len(file_content) == 0:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Uploaded file is empty"
            )
        
        # Process upload
        result = await upload_service.upload_employee_data(file_content, file.filename)
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to process employee upload: {str(e)}"
        )


@router.get("/upload/templates/{data_type}")
async def download_template(data_type: str):
    """
    Download CSV templates for data upload
    
    - **data_type**: Type of template (timesheet, revenue, employee)
    """
    templates = {
        "timesheet": {
            "filename": "timesheet_template.csv",
            "headers": ["Employee Name", "Regular Hours", "OT Hours", "DT Hours", "Date", "Department"]
        },
        "revenue": {
            "filename": "revenue_template.csv", 
            "headers": ["Business Unit", "Jobs Total Revenue", "Job Number", "Date", "Lead Generated By", "Sold By", "Assigned Technicians"]
        },
        "employee": {
            "filename": "employee_template.csv",
            "headers": ["Name", "Employee ID", "Department", "Hire Date", "Hourly Rate", "Status", "Commission Plan"]
        }
    }
    
    if data_type not in templates:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"Template not found. Available templates: {', '.join(templates.keys())}"
        )
    
    template = templates[data_type]
    csv_content = ",".join(template["headers"]) + "\n"
    
    from fastapi.responses import Response
    
    return Response(
        content=csv_content,
        media_type="text/csv",
        headers={
            "Content-Disposition": f"attachment; filename={template['filename']}"
        }
    )